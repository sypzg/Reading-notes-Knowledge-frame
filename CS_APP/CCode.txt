/*Basic constants and macros*/
#define WSIZE 4 /* word and header/footer size(bytes) */

#define DSIZE 8 /* double word size(bytes) */

#define CHUNKSIZE (1<<12) /*extend heap by this amout (bytes) */

/*Macro*/
#define Max(x,y) ((x)>(y)? (x) : (y))

/* pack a size and allocated bit into a word*/
#define PACK(size, alloc) ((size) | (alloc)) 

/*read and write a word at address p*/
#define GET(p) (*(unsigned int *)(p)) 
#define PUT(p, val)   (*(unsigned int *)(p) = (val))

/*Read the size and allocated fields from address p*/
#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

/*Given block ptr bp, compute address of its header and footer */
#define HDRP(bp) ((char *) (bp) - WSIZE)
#define FTRP(bp) ((char *) (bp)	+ GET_SIZE(HDRP(bp)) - DSIZE)

/*Given block ptr bp, compute address of next and previous blocks */
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

/*Given block ptr bp, compute it size
#define GBSIZE GET_SIZE(HDRP(bp))

/* static variable */
static void * heap_listp; /* always points to the prologue block */

int mm_init(void)
{
/*Create the initial empty heap
	if((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1)
		return -1;
		
	PUT(heap_listp, 0);/*Alignment padding
	PUT(head_list + (1*WSIZE), PACK(DSIZE, 1));/* prologue header */
	PUT(heap_list + (2*WSIZE), PACK(DSIZE, 1));/* prologue footer */
	PUT(head_list + (3*WSIZE), PACK(0, 1); /* epilogue header */
	
	heap_listp += (2*WSIZE);
	
/* extend the empty heap with a free block of CHUMSIZEbytes */
	if(extend_heap(CHUMSIZE/WSIZE) == NULL)
		return -1;
	
		return0;
}
	
static void *extend_heap(size_t words)
{
		char *bp;
		size_t size;
		
		/* Allocate an even number of words to words to maintain alignment */
		
		size = (word % 2) ? (words + 1)*WSIZE : words * WSIZE;
		
		if((long)(bp = mem_sbrk(size)) == -1)
			return NULL;
		
		/*Initialize free block header/footer and the epilogue */
		
		PUT(HDRP(bp), PACK(size, 0)); 
		PUT(FTRP(bp), PACK(size, 0));
		PUT(HDRP(NEXT_BLKP(bp)), PACK(0,1); /* new epilogue header */
		
		/* Coalesce if the previous block was free */
		return coalesce(bp);
}

void mm_free(void *bp)
{
	size_t size = GET_SIZE(HDRP(bp));
	
	PUT(HDRP(bp), PACK(size, 0));
	PUT(FTRP(bp), PACK(size, 0));
	coalesce(bp);
)

static void *coalesce(void *bp)
{
	size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
	size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp_)));
	size_t size = GET_SIZE(HDRP(bp));
	
	if(prev_alloc && next_alloc){	/* case 1 */
		
			return bp;
	}
	else if(prev_alloc && !next_alloc){ /* case 2 */	
			
			size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
			PUT(HDRP(bp), PACK(size, 0));
			PUT(FTRP(bp), PACK(size, 0));
		 }
	else if(!prev_alloc && next_alloc){ /* case 3 */
	
			size += GET_SIZE(HDRP(PREV_BLKP(bp)));
			PUT(FTRP(bp), PACK(size, 0));
			PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
			bp = PREV_BLKP(bp);
		 }
	else {
			size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
			PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
			PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
			bp = PREV_BLKP(bp);
		 }
	
	return bp;
}

void *mm_malloc(size_t size)
{
	size_t asize; /* Adjusted block size */
	size_t extendsize; /* Amoutt to extend heap if no fit */
	char *bp;
	
	/* ignore spurious requests */
	if(size == 0)
		return NULL;
	
	/* Adjust block size to include overhead and alignment reqs. */
	if(size <= DSIZE)
		asize = 2*DSIZE;
	else
		asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);
		
	/*search the free list for a fit */
	if((bp = find_fit(asize)) != NULL){
		place(bp, asize);
		return bp;
	}
	
	/* No fit found. Get more memory and place the block */
	
	extendsize = MAX(aside, CHUMSIZE);
	
	if((bp = extend_heap(extendsize/WSIZE)) == NULL)
		return NULL;
	
	place(bp, asize);
	
	return bp;
}

static void place(void *bp, size_t asize)
{
	int block_size = GBSIZE(bp); /* calculate the size of block bp */
	
	if(block_size == asize){
	/* case 1:block size equals to asize */
	
		PUT(HDRP(bp), PACK(asize, 1));
		PUT(FTRP(bp), PACK(asize, 1));
	}
	else if(block_size > asize){
	/* case 2:block size larger than asize, need spliting */
	
		PUT(FTRP(bp), PACK(block_size-asize, 1);
		PUT(HDRP(bp), PACK(asize, 1);
		PUT(FTRP(bp), PACK(asize, 1);
		PUT(NEXT_BLKP(bp), PACK(block_size-asize, 1);
		
	}else{
	/* default case: error case
	
		return;
	}
}
